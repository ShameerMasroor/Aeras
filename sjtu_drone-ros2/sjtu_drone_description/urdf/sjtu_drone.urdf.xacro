<?xml version="1.0" ?>
<robot name="sjtu_drone" xmlns:xacro="http://www.ros.org/wiki/xacro">
<!-- https://answers.ros.org/question/379014/passing-outside-parameters-into-urdf-file-using-xacro/ -->
  <!-- Need argument to get from launch file -->
  <xacro:arg name="params_path" default="$(find sjtu_drone_bringup)/config/drone.yaml"/> 

  <!-- Need seperate property for xacro inorder processing -->
  <xacro:property name="params_path" value="$(arg params_path)"/> 

  <!-- Read in the yaml dict as mp (short for model parameters) -->
  <xacro:property name="mp" value="${xacro.load_yaml(params_path)}"/> 

  <xacro:property name="M_PI" value="3.14159265359" />


  <link name="base_footprint"/>
  <joint name="base_footprint_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="base_footprint"/>
    <child link="base_link"/>
  </joint>

  <link name="base_link">
    <inertial>
      <mass value="1.477"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.1152" ixy="0" ixz="0" iyy="0.1152" iyz="0" izz="0.218"/>
    </inertial>
    <collision name="sjtu_drone_collision">
      <origin rpy="0 0 0" xyz="0   0   0.04"/>
      <geometry>
        <mesh filename="file://$(find sjtu_drone_description)/models/sjtu_drone/quadrotor_4.stl"/>
        <!-- <mesh filename="package://sjtu_drone/quadrotor_4.stl"/> -->
      </geometry>
    </collision>
    <visual name="sjtu_drone_visual">
      <origin rpy="0 0 0" xyz="0   0   0.04"/>
      <geometry>
        <mesh filename="file://$(find sjtu_drone_description)/models/sjtu_drone/quadrotor_4.dae"/>
        <!-- <mesh filename="package://sjtu_drone/quadrotor_4.dae"/> -->
      </geometry>
    </visual>
  </link>

  <joint name="sonar_joint" type="fixed">
    <parent link="base_link" />
    <child link="sonar_link" />
    <origin rpy="0 ${M_PI/2} 0" xyz="0 0 0"/>
  </joint>
  <link name="sonar_link"/>


<!-- You can change the position of the Lidar here. -->
  <joint name="lidar_joint" type="fixed">
    <parent link = "base_link" />
    <child link = "laser_frame" />
    <origin xyz = "0 0 0.12" rpy = "0 0 0"/>
    </joint>


<link name = "laser_frame">
  <visual> 
    <geometry>
      <cylinder radius="0.05" length="0.04"/>
    </geometry>
    <material name="red"/>
  </visual>

  <collision>
      <geometry>
        <cylinder radius="0.05" length="0.04"/>
      </geometry>
  </collision>

  <!-- <xacro:inertial_cylinder mass="0.1" length="0.04" radius="0.05">
      <origin xyz="0 0 0" rpy="0 0 0"/>
  </xacro:inertial_cylinder> -->

</link>



  <joint name="front_cam_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.2 0 0"/>
    <parent link="base_link" />
    <child link="front_cam_link" />
  </joint>
  <link name="front_cam_link"/>

  <joint name="bottom_cam_joint" type="fixed">
    <origin rpy="0 ${M_PI/2} 0" xyz="0 0 0"/>
    <parent link="base_link" />
    <child link="bottom_cam_link" />
  </joint>
  <link name="bottom_cam_link"/>


  <gazebo>
    <plugin name='simple_drone' filename='libplugin_drone.so'>
      <ros>
        <namespace>${mp['namespace']}</namespace>
        <remapping>cmd_vel:=cmd_vel</remapping>
        <remapping>imu:=imu</remapping>
        <remapping>sonar:=sonar</remapping>
        <remapping>camera_front:=camera_front</remapping>
        <remapping>camera_bottom:=camera_bottom</remapping>
        <remapping>camera_front_info:=camera_front_info</remapping>
        <remapping>camera_bottom_info:=camera_bottom_info</remapping>
        <remapping>gps:=gps</remapping>
        <remapping>lidar_plugin/out:=scan</remapping>
      </ros>

      <bodyName>base_link</bodyName>
      <pub_odom>true</pub_odom>
      <rollpitchProportionalGain>${mp['rollpitchProportionalGain']}</rollpitchProportionalGain>
      <rollpitchDifferentialGain>${mp['rollpitchDifferentialGain']}</rollpitchDifferentialGain>
      <rollpitchLimit>${mp['rollpitchLimit']}</rollpitchLimit>
      <yawProportionalGain>${mp['yawProportionalGain']}</yawProportionalGain>
      <yawDifferentialGain>${mp['yawDifferentialGain']}</yawDifferentialGain>
      <yawLimit>${mp['yawLimit']}</yawLimit>
      <velocityXYProportionalGain>${mp['velocityXYProportionalGain']}</velocityXYProportionalGain>
      <velocityXYDifferentialGain>${mp['velocityXYDifferentialGain']}</velocityXYDifferentialGain>
      <velocityXYLimit>${mp['velocityXYLimit']}</velocityXYLimit>
      <velocityZProportionalGain>${mp['velocityZProportionalGain']}</velocityZProportionalGain>
      <velocityZIntegralGain>${mp['velocityZIntegralGain']}</velocityZIntegralGain>
      <velocityZDifferentialGain>${mp['velocityZDifferentialGain']}</velocityZDifferentialGain>
      <velocityZLimit>${mp['velocityZLimit']}</velocityZLimit>
      <positionXYProportionalGain>${mp['positionXYProportionalGain']}</positionXYProportionalGain>
      <positionXYDifferentialGain>${mp['positionXYDifferentialGain']}</positionXYDifferentialGain>
      <positionXYIntegralGain>${mp['positionXYIntegralGain']}</positionXYIntegralGain>
      <positionXYLimit>${mp['positionXYLimit']}</positionXYLimit>
      <positionZProportionalGain>${mp['positionZProportionalGain']}</positionZProportionalGain>
      <positionZDifferentialGain>${mp['positionZDifferentialGain']}</positionZDifferentialGain>
      <positionZIntegralGain>${mp['positionZIntegralGain']}</positionZIntegralGain>
      <positionZLimit>${mp['positionZLimit']}</positionZLimit>
      <maxForce>${mp['maxForce']}</maxForce>
      <motionSmallNoise>${mp['motionSmallNoise']}</motionSmallNoise>
      <motionDriftNoise>${mp['motionDriftNoise']}</motionDriftNoise>
      <motionDriftNoiseTime>${mp['motionDriftNoiseTime']}</motionDriftNoiseTime>
    </plugin>
  </gazebo>

  <!-- Sensors -->
  <!-- IMU sensor in 100fps -->
  <gazebo reference="base_link">
    <sensor name='sensor_imu' type='imu'>
      <always_on> 1 </always_on>
      <visualize>1</visualize>
      <update_rate> 100 </update_rate>
      <pose> 0 0 0 0 0 0 </pose>
      <imu>
        <noise>
          <type>gaussian</type>
          <rate>
            <mean> 0 </mean>
            <stddev> 0.1 </stddev>
          </rate>
          <accel>
            <mean> 0 </mean>
            <stddev> 0.1 </stddev>
          </accel>
        </noise>
      </imu>
      <plugin name='imu' filename='libgazebo_ros_imu_sensor.so'>
        <ros>
          <namespace>${mp['namespace']}</namespace>
          <!-- <remapping>imu:=imu</remapping> -->
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
        <frame_name>${mp['namespace']}/base_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>



  <!-- For Lidar sensor -->
  <gazebo reference="laser_frame">
    <sensor name="lidar" type="ray">
      <always_on>1</always_on>
      <visualize>0</visualize>
      <update_rate>20</update_rate>
      <pose>0 0 0 0 0 0</pose> <!-- Adjust the pose of the lidar relative to base_link -->
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples> <!-- Number of samples per scan -->
            <resolution>1.0</resolution>
            <min_angle>-3.1416</min_angle> <!-- Minimum angle of the scan (in radians) -->
            <max_angle>3.1416</max_angle> <!-- Maximum angle of the scan (in radians) -->
          </horizontal>
          <vertical>
            <samples>30</samples> <!-- Multiple vertical scan lines to create 3D data -->
            <min_angle>-0.3926</min_angle> <!-- Lower vertical angle (in radians) -->
            <max_angle>0.3926</max_angle> <!-- Upper vertical angle (in radians) -->
            <!-- <resolution>2</resolution> -->
          </vertical>
        </scan>
        <range>
          <min>0.5</min> <!-- Minimum range in meters -->
          <max>90.0</max> <!-- Maximum range in meters -->
          <resolution>0.01</resolution> <!-- Range resolution -->
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.1</stddev> <!-- Noise stddev for the sensor -->
        </noise>
      </ray>
      <plugin name="lidar_plugin" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <namespace>${mp['namespace']}</namespace>
          <remapping>lidar_plugin/out:=scan</remapping> <!-- Topic for lidar data -->
        </ros>
        <frame_name>${mp['namespace']}/base_link</frame_name>
        <output_type>sensor_msgs/PointCloud2</output_type>
      </plugin>
    </sensor>
  </gazebo>

</robot>




